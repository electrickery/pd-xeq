include Makefile.sources
include Makefile.objects

CC = gcc

# next line has to be edited manually
PD_DIR = ../../../pd/src

SHARED_DIR = $(ROOT_DIR)/shared
OBJ_DIR = .
OUT_DIR = $(ROOT_DIR)
X_SUFFIX = pd_linux

SYSTEM = $(shell uname -m)
BASE_DIR = $(shell basename `pwd`)
BASE_NAME = $(shell basename `pwd` | awk -F - '{print $$1}')
BASE_VERSION = $(shell basename `pwd` | awk -F - '{print $$2}')

# CX: control external's main file
# AX: audio (tilde) external's main file
# LX: symlink external's main file
#     (if symlink external is tilde-only, use OTHER_SOURCES and AX_CLASSES)
CX_ALLSOURCES = \
$(CX_SOURCES) $(CX_SELFSOURCES) $(CX_ASELFSOURCES) $(CX_ONELIBSOURCES)
AX_ALLSOURCES = $(AX_SOURCES) $(AX_SELFSOURCES) $(AX_ONELIBSOURCES)
CX_SELFNAMES = $(notdir $(CX_SELFSOURCES))
CX_ASELFNAMES = $(notdir $(CX_ASELFSOURCES))
AX_SELFNAMES = $(notdir $(AX_SELFSOURCES))
CX_ONELIBNAMES = $(notdir $(CX_ONELIBSOURCES))
AX_ONELIBNAMES = $(notdir $(AX_ONELIBSOURCES))
CX_ALLNAMES = $(notdir $(CX_ALLSOURCES))
AX_ALLNAMES = $(notdir $(AX_ALLSOURCES))
LX_NAMES = $(notdir $(LX_SOURCES))
OTHER_NAMES = $(notdir $(OTHER_SOURCES))
CX_DIR = $(dir $(firstword $(CX_ALLSOURCES)))
AX_DIR = $(dir $(firstword $(AX_ALLSOURCES)))
SOURCES = $(CX_ALLSOURCES) $(AX_ALLSOURCES) $(LX_SOURCES) $(OTHER_SOURCES)
OTHER_OBJECTS = $(foreach fn,$(OTHER_SOURCES:.c=.o),$(OBJ_DIR)/$(fn))
LX_OBJECTS = $(foreach fn,$(LX_SOURCES:.c=.o),$(OBJ_DIR)/$(fn))
SHARED_OBJECTS = $(foreach fn,$(LIB_OBJECTS),$(SHARED_DIR)/$(fn))
OBJECTS = $(OTHER_OBJECTS) $(LX_OBJECTS) $(SHARED_OBJECTS)

INCLUDES = -I. -I$(PD_DIR) -I$(SHARED_DIR)
DEFINES = -DUNIX
OPT_CFLAGS = -O6 -funroll-loops -fomit-frame-pointer -fPIC
WARN_CFLAGS =  -Wall -W -Wstrict-prototypes   \
	-Wno-unused -Wno-parentheses -Wno-switch
DBG_CFLAGS = 

CFLAGS = $(WARN_CFLAGS) $(OPT_CFLAGS) $(DEFINES) $(INCLUDES)
LFLAGS = -export_dynamic  -shared

BLXTERNS = $(foreach fn,$(LX_SOURCES:.c=.$(X_SUFFIX)),$(OUT_DIR)/$(fn))
CLXTERNS = $(foreach fn,$(CX_CLASSES:=.$(X_SUFFIX)),$(OUT_DIR)/$(fn))
ALXTERNS = $(foreach fn,$(AX_CLASSES:=~.$(X_SUFFIX)),$(OUT_DIR)/$(fn))
LXTERNS = $(BLXTERNS) $(CLXTERNS) $(ALXTERNS)
CXTERNS = $(foreach fn,$(CX_ALLNAMES:.c=.$(X_SUFFIX)),$(OUT_DIR)/$(fn))
AXTERNS = $(foreach fn,$(AX_ALLNAMES:.c=~.$(X_SUFFIX)),$(OUT_DIR)/$(fn))
EXTERNS = $(CXTERNS) $(AXTERNS) $(LXTERNS)

default: define_build all

$(foreach fn,$(CX_SELFNAMES:.c=.$(X_SUFFIX)),$(OUT_DIR)/$(fn)): \
		$(OUT_DIR)/%.$(X_SUFFIX) : $(CX_DIR)%.o
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $+

# for control externs being part of a signal collection (linedrive)
# LATER find a better way
$(foreach fn,$(CX_ASELFNAMES:.c=.$(X_SUFFIX)),$(OUT_DIR)/$(fn)): \
		$(OUT_DIR)/%.$(X_SUFFIX) : $(AX_DIR)%.o
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $+

$(foreach fn,$(CX_ONELIBNAMES:.c=.$(X_SUFFIX)),$(OUT_DIR)/$(fn)): \
		$(OUT_DIR)/%.$(X_SUFFIX) : $(CX_DIR)%.o $(CX_ONELIB)
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $+

$(foreach fn,$(AX_SELFNAMES:.c=~.$(X_SUFFIX)),$(OUT_DIR)/$(fn)): \
		$(OUT_DIR)/%~.$(X_SUFFIX) : $(AX_DIR)%.o
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $+

$(foreach fn,$(AX_ONELIBNAMES:.c=~.$(X_SUFFIX)),$(OUT_DIR)/$(fn)): \
		$(OUT_DIR)/%~.$(X_SUFFIX) : $(AX_DIR)%.o $(AX_ONELIB)
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $+

# rules for symlink externals must precede generic extern rules
$(OUT_DIR)/$(BASE_NAME)_%~.$(X_SUFFIX): $(OUT_DIR)/$(BASE_NAME).$(X_SUFFIX)
	-ln -sf $(BASE_NAME).$(X_SUFFIX) $@

$(OUT_DIR)/$(BASE_NAME)_%.$(X_SUFFIX): $(OUT_DIR)/$(BASE_NAME).$(X_SUFFIX)
	-ln -sf $(BASE_NAME).$(X_SUFFIX) $@

# library stub
# if not equal BASE_NAME, it has to be declared explicitly in BASE_DIR/Makefile
$(OUT_DIR)/$(LX_STUB)_%~.$(X_SUFFIX): $(OUT_DIR)/$(BASE_NAME).$(X_SUFFIX)
	-ln -sf $(BASE_NAME).$(X_SUFFIX) $@

$(OUT_DIR)/$(LX_STUB)_%.$(X_SUFFIX): $(OUT_DIR)/$(BASE_NAME).$(X_SUFFIX)
	-ln -sf $(BASE_NAME).$(X_SUFFIX) $@

$(OUT_DIR)/$(LX_STUB).$(X_SUFFIX): $(OUT_DIR)/$(BASE_NAME).$(X_SUFFIX)
	-ln -sf $(BASE_NAME).$(X_SUFFIX) $@

# generic rule for audio externals
$(OUT_DIR)/%~.$(X_SUFFIX): $(AX_DIR)%.c $(OBJECTS)
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $(OBJECTS) $<

# generic rule for control externals
$(OUT_DIR)/%.$(X_SUFFIX): $(CX_DIR)%.c $(OBJECTS)
	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $(OBJECTS) $<

define_build:
	@if [[ -f build_counter && \
		`date -r build_counter +%j` != `date +%j` ]] ; then \
		mv build_counter build_counter~ ; \
		cat build_counter~ | \
		awk '{if (index($$2,"BUILD")) print $$1, $$2, $$3+1; else print}' \
			> build_counter ; \
	fi

clean: emptydeps
# remove all objects and externs that are contained in current directory
	-rm -f *.o *.$(X_SUFFIX)

cleanall: clean
# remove default target externs
	-rm -f $(EXTERNS)

OLDROOT_DIR = $(shell ls -d -1 ../../Mixed-* | tail -1)

diff:
	@echo -n > diff.out ; \
	for f in {*.h,*.c} ; do \
		if [ -f $$f ] ; then \
			diff -u $(OLDROOT_DIR)/$(BASE_DIR)/$$f $$f >> diff.out ; \
		fi \
	done

BUILD = $(shell awk '{if (index($$2,"BUILD")) print $$3}' build_counter)
RELEASE = $(shell awk \
	'{if (index($$2,"RELEASE")) print substr($$3,2,length($$3)-2)}' \
	build_counter)

RELEASE_STUB = doc/html/externs/$(BASE_DIR)-$(RELEASE)$(BUILD)
SRC_TAR = $(RELEASE_STUB)-src.tar
BIN_TAR = $(RELEASE_STUB)-bin.tar
LIB_TAR = $(RELEASE_STUB)-lib.tar
DOC_TAR = $(RELEASE_STUB)-doc.tar
ALL_TAR = $(RELEASE_STUB)-all.tar

RELCXTERNS = $(foreach fn,$(CX_ALLNAMES:.c=.$(X_SUFFIX)),$(fn))
RELAXTERNS = $(foreach fn,$(AX_ALLNAMES:.c=~.$(X_SUFFIX)),$(fn))
RELOXTERNS = $(foreach fn,$(REL_LIBS:=.$(X_SUFFIX)),$(fn))
RELEXTERNS = $(RELCXTERNS) $(RELAXTERNS) $(RELOXTERNS)

srelease: emptydeps define_build
	cd $(ROOT_DIR)/shared; make emptydeps
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-all.exclude -zcf \
		$(SRC_TAR).gz $(BASE_DIR)/* shared/* Makefile.common LICENSE.txt

stestrelease: emptydeps define_build
	cd $(ROOT_DIR)/shared; make emptydeps
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-all.exclude -cf \
		$(SRC_TAR) $(BASE_DIR)/* shared/* Makefile.common LICENSE.txt
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-test.exclude -rf \
		$(SRC_TAR) test/$(BASE_NAME)/*
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-vicious.exclude -rf \
		$(SRC_TAR) ViCious/$(BASE_DIR)/*
	cd $(ROOT_DIR); gzip -f $(SRC_TAR)

brelease: define_build
	cd $(ROOT_DIR); tar zcf \
		$(BIN_TAR).gz $(RELEXTERNS)

rellibs:
	cd $(ROOT_DIR); tar zcf \
		$(LIB_TAR).gz $(RELOXTERNS)

drelease: define_build
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-doc.exclude -zcf \
		$(DOC_TAR).gz doc/examples/$(BASE_NAME)/*

release: srelease brelease drelease
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-all.exclude -cf \
		$(ALL_TAR) $(BASE_DIR)/* shared/* Makefile.common LICENSE.txt \
			$(RELEXTERNS)
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-doc.exclude -rf \
		$(ALL_TAR) doc/examples/$(BASE_NAME)/*
	cd $(ROOT_DIR); gzip -f $(ALL_TAR)

testrelease: stestrelease brelease
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-all.exclude -cf \
		$(ALL_TAR) $(BASE_DIR)/* shared/* Makefile.common LICENSE.txt \
			$(RELEXTERNS)
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-test.exclude -rf \
		$(ALL_TAR) test/$(BASE_NAME)/*
	cd $(ROOT_DIR); tar -X $(BASE_DIR)/$(BASE_NAME)-vicious.exclude -rf \
		$(ALL_TAR) ViCious/$(BASE_DIR)/*
	cd $(ROOT_DIR); gzip -f $(ALL_TAR)

depend:
	$(CC) $(CFLAGS) -M $(SOURCES) > Makefile.deps

emptydeps:
	-rm -f Makefile.deps
	touch Makefile.deps
	chmod 666 Makefile.deps

Makefile.deps:
	touch Makefile.deps
	chmod 666 Makefile.deps

include Makefile.deps
